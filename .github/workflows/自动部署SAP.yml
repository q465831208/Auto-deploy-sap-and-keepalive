name: 自动部署 SAP

on:
  schedule:
    # 
    - cron: '56 23 * * *'
  workflow_dispatch:  # 保留手动触发选项
    inputs:
      type:
        description: '选择部署的节点类型'
        required: true
        default: 'Argo隧道CDN'
        type: choice
        options:
          - ws直连
          - xhttp直连
          - Argo隧道CDN
      region:
        description: '选择部署区域'
        required: true
        default: 'SG(free)'
        type: choice
        options:
          #  免费区域
          - SG(free)  # azure新加披
          - US(free)  # aws美国
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  MEMORY: 1024M

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: Determine CF API endpoint and app name
      run: |
        # 设置API端点和生成随机字符串
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        
        # 设置默认值（自动运行时使用）
        REGION="${{ github.event.inputs.region || 'SG(free)' }}"
        TYPE="${{ github.event.inputs.type || 'Argo隧道CDN' }}"
        
        # 自动运行时使用固定应用名称
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "APP_NAME=123" >> $GITHUB_ENV
        fi
        
        case "$REGION" in
          # 免费区域
          "SG(free)")
            echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
            if [ "${{ github.event_name }}" != "schedule" ]; then
              echo "APP_NAME=free-sg$RANDOM_STR" >> $GITHUB_ENV
            fi
            ;;
          "US(free)")
            echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
            if [ "${{ github.event_name }}" != "schedule" ]; then
              echo "APP_NAME=free-us$RANDOM_STR" >> $GITHUB_ENV
            fi
            ;;
        esac
        
        # 如果用户提供了应用名称，则使用用户提供的
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        fi
        
        # 如果自定义了docker镜像变量则使用定义的，否则按照选择的
        if [[ -n "${{ secrets.DOCKER_IMAGE }}" ]]; then
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_ENV
        else
          if [ "$TYPE" = "ws直连" ]; then
            echo "DOCKER_IMAGE=ghcr.io/eooce/ws:latest" >> $GITHUB_ENV
          elif [ "$TYPE" = "xhttp直连" ]; then
            echo "DOCKER_IMAGE=ghcr.io/eooce/goxhttp:latest" >> $GITHUB_ENV
          else 
            echo "DOCKER_IMAGE=ghcr.io/eooce/nodejs:main" >> $GITHUB_ENV
          fi
        fi
        
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"
        echo "部署类型: ${{ env.DOCKER_IMAGE }}"

    - name: Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"

        # 获取组织列表
        ORG=$(cf orgs | sed -n '4p')
        echo "Selected org: $ORG"
        echo "ORG=$ORG" >> $GITHUB_ENV

        # 获取空间列表
        SPACE=$(cf spaces | sed -n '4p')
        echo "Selected space: $SPACE"
        echo "SPACE=$SPACE" >> $GITHUB_ENV

        # 使用获取的组织和空间重新登录
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

    - name: Deploy application
      run: |
        if cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} -k 512M --health-check-type port; then
          echo "Deployment successful"
        else
          cf delete ${{ env.APP_NAME }} -f
          echo "伙计,没资源了,部署失败,请明天早上8:20至9:00再尝试部署,已清理失败部署残留"
          exit 1
        fi
        
    - name: Set environment variables
      run: |
        # 基础环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID || '3b86aec3-88fd-4cbe-9a68-f222d5df60d3' }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} ARGO_PORT "${{ secrets.ARGO_PORT }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN || 'xjp-spa.daili123.dpdns.org' }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH || 'eyJhIjoiYWViZTE2OGY2YmM2NmFhZThmMDcwNjY2ZWVkYmJiZDIiLCJ0IjoiMmY2MWZhNWYtZTJkMS00YzhiLWJmYWYtMTcwMTBkMTA1OTU3IiwicyI6Ik16RXpNVEJsWldNdFltVTRaUzAwTmpSakxXSXpaVGd0WmpZeU5tTXpPVGMyTlRreSJ9' }}"
        cf set-env ${{ env.APP_NAME }} ARGO_TUNNEL_ID "${{ secrets.ARGO_TUNNEL_ID || '2f61fa5f-e2d1-4c8b-bfaf-17010d105957' }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH || '123' }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP || 'cf.877774.xyz' }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT || '' }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        # 可选：从文件读取环境变量(如果存在)
        if [ -f .env ]; then
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
              IFS='=' read -r key value <<< "$line"
              cf set-env ${{ env.APP_NAME }} "$key" "$value"
            fi
          done < .env
        fi

        # 如果 DOCKER_IMAGE 中否包含 xhttp、goxhttp、ws 等关键词说明为直连镜像
        if [[ "${{ env.DOCKER_IMAGE }}" =~ (xhttp|goxhttp|ws) ]]; then
          # 获取应用路由
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            echo "设置 DOMAIN 环境变量为: $ROUTE"
            cf set-env ${{ env.APP_NAME }} DOMAIN "$ROUTE"
          else
            echo "⚠️ 未找到应用路由，无法设置 DOMAIN,请手动将节点里的address、host和sni改为应用域名"
          fi
        fi
        
    - name: Restage application
      run: |
        cf restage ${{ env.APP_NAME }}

    - name: Verify deployment
      run: |
        cf app ${{ env.APP_NAME }}
        echo "Deployment completed successfully!"

    - name: 详细部署信息
      run: |
        echo "🚀 部署完成！详细信息如下："
        echo "区域(Region): ${{ github.event.inputs.region || 'US(free)' }}"
        echo "部署类型(Type): ${{ github.event.inputs.type || 'Argo隧道CDN' }}"
        echo "组织(ORG): ${{ env.ORG }}"
        echo "空间(SPACE): ${{ env.SPACE }}"
        echo "应用名称(App Name): ${{ env.APP_NAME }}"

        # 获取应用路由
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        if [ -n "$ROUTE" ]; then
          echo "应用 URL (APP_URL): https://$ROUTE"
        else
          echo "⚠️ 未找到应用路由，请检查部署状态。"
        fi
